swagger: "2.0"
info:
  version: "0.0.1"
  title: "My Home"
  description: |
    # Authorization
    For authorization you should add next header to your request `Authorization: Bearer $token` where `$token` is accsess JWT token which should be received from `signin` or `signup` or `refresh` endpoints.
    Every accsess JWT token has expiration date. When token expires, you should refresh it with `refresh_token` using `refresh` endpoint. `refresh_token` you will receive alongside with accsess token.
    JWT token has next payload:
    ```
    {
      "expiration_date": number, # unix timestamp
      "user_id": number,
      "user_type_mask": number, # see user object
      "user_flags_mask": number, # see user object
      "can_restore_password": boolean
     }
    ```
host: "api-myhome.mocstage.com"
#host: "127.0.0.1:8080"
basePath: "/api/v3"
schemes:
  - https
#  - http

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

paths:
  /signin/admin:
    post:
      tags:
        - sign in & sign up
      summary: Sign in and receive token.
      consumes:
        - application/json
      parameters:
        - in: body
          name: creds
          description: Credentials for sign-in.
          schema:
            type: object
            required:
              - phone_number
              - password
            properties:
              phone_number:
                type: string
              password:
                type: string
              locale:
                type: string
              remember_me:
                type: string
                description: "Set if need remember on this pc on the month. It's same what is token basic"
      responses:
        200:
          description: successful operation
          schema:
            allOf:
              - $ref: '#/definitions/Token'
            properties:
              qrcode:
                type: string
                required: false
                description: qrcode Base64
              type:
                type: string
                required: true
                description: "Can be 'jwt' or 'basic'"

  /signin/admin/code:
    post:
      tags:
        - sign in & sign up
      summary: Sign in and receive secret code to confirm.
      consumes:
        - application/json
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: "Basic token auth. Example: Basic <token> "
        - in: body
          name: code
          type: object
          schema:
            properties:
              code:
                type: string
          description: "Set if need remember on this pc on the month"
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Token'

  /signin/client:
    post:
      tags:
        - sign in & sign up
      summary: Sign in and receive token.
      consumes:
        - application/json
      parameters:
        - in: body
          name: creds
          description: Credentials for sign-in.
          schema:
            type: object
            required:
              - phone_number
              - password
            properties:
              phone_number:
                type: string
              password:
                type: string
              apns_token:
                type: string
              firebase_token:
                type: string
              locale:
                type: string
              device_type:
                type: "integer"
                format: "int8"
                enum:
                - 2 # android
                - 1 # ios
                default: 1 # =)
                description: 1 - ios, 2 - android
              timezone:
                type: "string"
                description: timezone
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Token'

  /signin/technician:
    post:
      tags:
        - sign in & sign up
      summary: Sign in and receive token.
      consumes:
        - application/json
      parameters:
        - in: body
          name: creds
          description: Credentials for sign-in.
          schema:
            type: object
            required:
              - phone_number
              - password
            properties:
              phone_number:
                type: string
              password:
                type: string
              apns_token:
                type: string
              firebase_token:
                type: string
              locale:
                type: string
              device_type:
                type: "integer"
                format: "int8"
                enum:
                - 2 # android
                - 1 # ios
                default: 1 # =)
                description: 1 - ios, 2 - android
              timezone:
                  type: "string"
                  description: time zone
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Token'

  /signup/client:
    post:
      tags:
        - sign in & sign up
      summary: Creates new user.
      consumes:
        - application/json
      parameters:
        - in: body
          name: creds
          description: Credentials for sign-in.
          schema:
            $ref: '#/definitions/ClientSignUpParams'

      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'

  /signup/technician:
    post:
      tags:
        - sign in & sign up
      summary: Creates new user.
      consumes:
        - application/json
      parameters:
        - in: query
          name: resource_bytes_count
          type: integer
          format: int64
          description: "Send when attached avatar"
          required: false
        - in: body
          name: creds
          description: Credentials for sign-in.
          schema:
            $ref: '#/definitions/TechnicianSignUpParams'
      responses:
        200:
          description: successful operation
          schema:
            allOf:
              - $ref: '#/definitions/Token'
            properties:
              upload_signed_url:
                type: string
                required: false
                description: "If attached avatar"

  /signup/invite/{code}:
    get:
      tags:
        - sign in & sign up
      consumes:
        - application/json
      summary: Receive user info by invite code
      parameters:
        - in: path
          name:  code
          description: "code"
          required: true
          type: string
      responses:
        200:
          description: "successful operation"
          schema:
            allOf:
              - $ref: '#/definitions/User'
            properties:
              company:
                $ref: '#/definitions/Company'
              services:
                type: array
                items:
                  $ref: '#/definitions/Service'

  /signup/company/admin/invite/{code}:
    post:
      tags:
        - sign in & sign up
      consumes:
        - application/json
      summary: Continue create new company admin
      parameters:
        - in: path
          name:  code
          description: "code"
          required: true
          type: string
        - in: body
          name: data
          schema:
            $ref: '#/definitions/CompanyAdminConfirmParams'
      responses:
        202:
          description: "successful operation"

  /signup/company/technician/invite/{code}:
    post:
      tags:
        - sign in & sign up
      consumes:
        - application/json
      summary: Continue create new company technician
      parameters:
        - in: path
          name:  code
          description: "code"
          required: true
          type: string
        - in: body
          name: data
          schema:
            $ref: '#/definitions/CompanyTechnicianConfirmParams'
      responses:
        202:
          description: "successful operation"

  /signup/resend/invite/{phone}:
    get:
      tags:
        - sign in & sign up
      consumes:
        - application/json
      summary: Resend invite code
      parameters:
        - in: path
          name:  phone
          description: "phone"
          required: true
          type: string
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/User'

  /signin/admin/recovery/{phone}:
    get:
      tags:
        - sign in & sign up
      consumes:
        - application/json
      summary: Login recovery for admin
      parameters:
       - in: path
         name: phone
         type: string
         required: true
      responses:
        200:
          description: "successful operation"

  /signin/admin/recovery/{code}:
    patch:
      tags:
        - sign in & sign up
      consumes:
        - application/json
      summary: Login recovery for admin
      parameters:
       - in: path
         name: code
         type: string
         required: true
      responses:
        200:
          description: "successful operation"


#  /signin/resend/code:
#    get:
#      tags:
#        - sign in & sign up
#      consumes:
#        - application/json
#      summary: Resend sms code
#      parameters:
#       - in: header
#         name: Authorization
#         type: string
#         required: true
#         description: "Basic token auth. Example: Basic <token> "
#      responses:
#        200:
#          description: "successful operation"

###### Company start ##########
  /companies:
    get:
      tags:
        - company
      security:
        - Bearer: []
      summary: Receive companies with id.
      consumes:
        - application/json
      parameters:
        - name: "status"
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Returns only companies by status. Can be used with other filters. status : 0 - Unactivate, 1 - Activate"
        - name: "phone_number"
          in: "query"
          description: "Search by phone number. Can't be used with other filters"
          required: false
          type: "string"
        - name: "full_name"
          in: "query"
          description: "Search by full name. Can't be used with other filters"
          required: false
          type: "string"
        - name: "registration_number"
          in: "query"
          description: "Search by registration number. Can't be used with other filters"
          required: false
          type: "string"
        - name: "contact_name"
          in: "query"
          description: "Search by contact name. Can't be used with other filters"
          required: false
          type: "string"
        - name: "email"
          in: "query"
          description: "Search by email. Can't be used with other filters"
          required: false
          type: "string"
        - name: "company_id"
          in: "query"
          description: "Search by company id. Can't be used with other filters"
          required: false
          type: "integer"
          format: "int64"
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/CompanyCollection'
    post:
      tags:
        - company
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Create new company
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/CompanyCommand'
      responses:
        201:
          description: Company created
          schema:
            $ref: '#/definitions/Company'

  /companies/{companyId}:
    get:
      tags:
        - company
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Get company by id
      parameters:
        - name: "companyId"
          in: path
          description: "ID of company"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            allOf:
              - $ref: "#/definitions/Company"
              - type: object
                properties:
                  rating:
                    type: integer
                    format: int64
                  debt_from_company_to_myhome:
                    type: integer
                    format: int64
                  debt_from_myhome_to_company:
                    type: integer
                    format: int64
                  total_jobs:
                    type: integer
                    format: int64
                  total_technician:
                    type: integer
                    format: int64
    patch:
      tags:
        - company
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Update company
      parameters:
        - in: path
          name: "companyId"
          description: "ID of company"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: data
          schema:
            $ref: "#/definitions/CompanyCommand"
      responses:
        202:
          description: "Accepted update"
          schema:
            $ref: '#/definitions/Company'

  /companies/{companyId}/commission:
    get:
      tags:
        - company
      security:
        - Bearer: []
      summary: Returns commission for company.
      consumes:
        - application/json
      parameters:
        - name: "companyId"
          in: "path"
          description: "ID of company"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Commission'

    patch:
      tags:
        - company
      security:
        - Bearer: []
      summary: Updates commission for company.
      consumes:
        - application/json
      parameters:
        - name: "companyId"
          in: "path"
          description: "ID of company"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: commission object
          schema:
            $ref: '#/definitions/Commission'
      responses:
        202:
          description: "successful operation"

  /companies/{companyId}/services:
    get:
      tags:
        - company
      security:
        - Bearer: []
      summary: Returns services that related to company.
      consumes:
        - application/json
      parameters:
        - name: "companyId"
          in: "path"
          description: "ID of company"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/ServiceCollection'

  /companies/{companyId}/jobs:
    get:
      tags:
        - company
      security:
        - Bearer: []
      summary: Returns jobs that related to company.
      consumes:
        - application/json
      parameters:
        - name: "companyId"
          in: "path"
          description: "ID of company"
          required: true
          type: "integer"
          format: "int64"
        - name: "sort_by"
          in: "query"
          description: "Sorting jobs by create date. 0 - newest, 1 - oldest"
          required: false
          type: "integer"
          format: "int32"
        - name: "phone"
          in: query
          required: false
          description: "Search jobs by phone"
        - name: "job_id"
          in: "query"
          description: "Search by job id. Can't be used with other filters"
          required: false
          type: "integer"
          format: "int64"
        - name: status
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering job by the status. Status assigned = 104 and status no assigned = 103"
        - name: payment_status
          in: "query"
          type: string
          description:   "Filtering job by the payment status. Status may be `paid` or `refunded`"
        - name: services
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering job by the services."
        - name: scheduled_from
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering job by the date from."
        - name: scheduled_to
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering job by the date to."
        - name: active_job
          in: "query"
          type: boolean
          required: false
          description: "Filtering job by active."
        - name: completed_job
          in: "query"
          type: boolean
          required: false
          description: "Filtering job by completed."
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/JobsCollection'

  /companies/{companyId}/jobs/{jobId}/edit:
    patch:
      tags:
        - company
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Edit job.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: Job
          description: Job object.
          schema:
            type: object
            properties:
              assigned_technician_id:
                type: integer
                format: uint64
                description: assigned technician id
              status:
                type: integer
                format: uint64
                description: job status
              scheduled_date:
                type: integer
                format: uint64
                description: Unix timestamp
              note:
                type: string
                description: comment
              version:
                type: integer
                format: uint64
                description: document version

      responses:
        200:
          description: "successful operation"
          schema:
            allOf:
              - $ref: '#/definitions/Job'
            properties:
              version:
                type: "integer"
                format: "int64"

  /companies/{companyId}/invoices:
    get:
      tags:
        - company
      security:
        - Bearer: []
      summary: Returns list of invoices for company. Used by global admin.
      consumes:
        - application/json
      parameters:
        - name: "companyId"
          in: "path"
          description: "ID of company"
          required: true
          type: "integer"
          format: "int64"
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/InvoicesCollection'

  /companies/{companyId}/activate:
    patch:
      tags:
        - company
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Update company
      parameters:
        - in: path
          name: "companyId"
          description: "ID of company"
          required: true
          type: "integer"
          format: "int64"
      responses:
        202:
          description: "Accepted update"

  /companies/{companyId}/inactivate:
    patch:
      tags:
        - company
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Update company
      parameters:
        - in: path
          name: "companyId"
          description: "ID of company"
          required: true
          type: "integer"
          format: "int64"
      responses:
        202:
          description: "Accepted update"

  /companies/{companyId}/admins:
    get:
      tags:
        - company
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Receive company admins
      parameters:
        - in: path
          name:  companyId
          description: "ID of company"
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/UsersCollection'

    post:
      tags:
        - company
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Create comoany admin
      parameters:
        - in: path
          name:  companyId
          description: "ID of company"
          required: true
          type: integer
          format: int64
        - in: body
          name: data
          schema:
            $ref: '#/definitions/CompanyUserCreateParams'
      responses:
        201:
          description: Created

  /companies/{companyId}/admins/{userId}:
    get:
      tags:
        - company
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Receive company admin by id
      parameters:
        - in: path
          name:  companyId
          description: "ID of company"
          required: true
          type: integer
          format: int64
        - in: path
          name:  userId
          description: "ID of user"
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/User'

    delete:
      tags:
        - company
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Delete company admin by id
      parameters:
        - in: path
          name:  companyId
          description: "ID of company"
          required: true
          type: integer
          format: int64
        - in: path
          name:  userId
          description: "ID of user"
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: "successful operation"

  /companies/{companyId}/technicians:
    get:
      tags:
        - company
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Receive company technicians
      parameters:
          - in: path
            name:  companyId
            description: "ID of company"
            required: true
            type: integer
            format: int64
          - in: query
            name: "sort_by"
            description: "Sorting technicians by create date. 0 - newest, 1 - oldest"
            required: false
            type: "integer"
            format: "int32"
          - name: job_id
            in: query
            description: "Get technicians who can make this job"
            required: false
            type: "integer"
            format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/UsersCollection'

    post:
      tags:
        - company
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Create new company technician
      parameters:
        - in: path
          name:  companyId
          description: "ID of company"
          required: true
          type: integer
          format: int64
        - in: body
          name: data
          schema:
            type: object
            required:
              - email
              - phone_number
            properties:
              email:
                type: "string"
              phone_number:
                type: "string"
      responses:
        201:
          description: Created

  /companies/{companyId}/technicians/{userId}:
    get:
      tags:
        - company
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Receive  company technician by id
      parameters:
        - in: path
          name:  companyId
          description: "ID of company"
          required: true
          type: integer
          format: int64
        - in: path
          name:  userId
          description: "ID of user"
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/User'

  /companies/{companyId}/technicians/{userId}/invoices:
    get:
      tags:
        - company
      security:
        - Bearer: []
      summary: Returns list of invoices for user. Used by admin.
      consumes:
        - application/json
      parameters:
        - name: "companyId"
          in: "path"
          description: "ID of company"
          required: true
          type: "integer"
          format: "int64"
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/InvoicesCollection'

  /companies/{companyId}/technicians/{userId}/jobs:
    get:
      tags:
        - company
      security:
        - Bearer: []
      summary: Returns jobs that related to user.
      consumes:
        - application/json
      parameters:
        - name: "companyId"
          in: "path"
          description: "ID of company"
          required: true
          type: "integer"
          format: "int64"
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/JobsCollection'

  /companies/{companyId}/jobs/{jobId}/invoices/final:
    get:
      tags:
        - company
      security:
      - Bearer: []
      summary: Returns final invoice for company admin.
      parameters:
        - name: "companyId"
          in: "path"
          description: "ID of company"
          required: true
          type: "integer"
          format: "int64"
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/JobsFinalInvoice'

  /companies/{companyId}/requests:
    get:
      tags:
        - company
      security:
      - Bearer: []
      summary: Receive requests list. Company admin area.
      parameters:
        - name: "companyId"
          in: "path"
          description: "ID of company"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/RequestAdminCollection'

  /companies/{companyId}/requests/approve/{id}:
    post:
      tags:
        - company
      security:
      - Bearer: []
      summary: Approve technician request. Company admin area.
      parameters:
        - name: "companyId"
          in: "path"
          description: "ID of company"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"

  /companies/{companyId}/requests/decline/{id}:
    post:
      tags:
        - company
      security:
      - Bearer: []
      summary: Decline technician request. Company admin area.
      parameters:
        - name: "companyId"
          in: "path"
          description: "ID of company"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
#    delete:
#      tags:
#        - company
#      security:
#        - Bearer: []
#      consumes:
#        - application/json
#      summary: Delete company technician by id
#      parameters:
#        - in: path
#          name:  companyId
#          description: "ID of company"
#          required: true
#          type: integer
#          format: int64
#        - in: path
#          name:  userId
#          description: "ID of user"
#          required: true
#          type: integer
#          format: int64
#      responses:
#        204:
#          description: "successful operation"

######## Company End ############

  /users/{userId}:
    get:
      tags:
        - user
      security:
        - Bearer: []
      summary: Receive user with id.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - name: "with_requests"
          in: "path"
          description: "1 - return user with requests"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"

    patch:
      tags:
        - user
      security:
        - Bearer: []
      summary: Updates user. Also used to create service and profile update requests.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: creds
          description: Credentials for sign-in.
          schema:
            type: "object"
            properties:
              avatar_url:
                type: string
              full_name:
                type: string
              email:
                type: string
              address:
                $ref: "#/definitions/Address"
              company:
                $ref: "#/definitions/CompanyUnit"
              requests:
                $ref: "#/definitions/RequestCollection"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"

  /users/{userId}/profile:
    delete:
      tags:
        - user
      security:
        - Bearer: []
      summary: Delete user profile.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: creds
          type: object
          schema:
            properties:
              password:
                type: string
                required: true
      responses:
        202:
          description: "successful operation"

    patch:
      tags:
        - user
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Update user profile by admin
      parameters:
        - in: path
          name: "userId"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: data
          schema:
            $ref: "#/definitions/UserForAdmin"
      responses:
        202:
          description: "Accepted update"
          schema:
            $ref: "#/definitions/UserForAdminResponse"

  /users/{userId}/export:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Send to email a user profile data.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: creds
          type: object
          schema:
            properties:
              email:
                type: string
                required: true
              password:
                type: string
                required: true
      responses:
        202:
          description: "successful operation"

  /users/{userId}/password/update:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Updates user password.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: passwords
          required: true
          description: Old and new passwords.
          schema:
            type: "object"
            required:
              - old_password
              - new_password
            properties:
              old_password:
                type: string
              new_password:
                type: string
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"

  /users/{userId}/password/restore:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Restores user password.
      description: Requires token with restore rights. You can get it from `/users/verification/phone/{phone}/code/{code}/restore` endpoint.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: password
          required: true
          description: New password.
          schema:
            type: "object"
            required:
              - new_password
            properties:
              new_password:
                type: string
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"

  /users/{userId}/services/update:
    patch:
      tags:
        - user
      security:
        - Bearer: []
      summary: Update user services.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: services
          required: true
          description: Services id.
          schema:
            type: "object"
            required:
              - services_id
            properties:
              services_id:
                type: "array"
                items:
                  type: integer
                  format: int64
      responses:
        200:
          description: "successful operation"

  /users/{userId}/locale/update:
    patch:
      tags:
        - user
      security:
        - Bearer: []
      summary: Update user's device locale.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: data
          required: true
          description: Locale and faerbase token.
          schema:
            type: "object"
            required:
              - locale
              - firebase_token
            properties:
              locale:
                type: string
                enum:
                  - en
                  - ar
              firebase_token:
                type: string
      responses:
        200:
          description: "successful operation"

  /users/{userId}/notifications/tokens/update:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Updates users notifiaction token(s).
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: tokens
          description: Tokens.
          required: true
          schema:
            type: object
            required:
              - firebase_token
              - device_type
            properties:
              apns_token:
                type: string
              firebase_token:
                type: string
              device_type:
                type: "integer"
                format: "int8"
                enum:
                - 2 # android
                - 1 # ios
                default: 1 # =)
                description: 1 - ios, 2 - android
              timezone:
                type: "string"
                description: time zone
      responses:
        200:
          description: "successful operation"

  /users/{userId}/notifications/tokens:
    delete:
      tags:
        - user
      security:
        - Bearer: []
      summary: Deletes users notifiaction token with given firebase token.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: firebase_token
          required: true
          description: Firebase token.
          schema:
            type: "object"
            required:
              - firebase_token
            properties:
              firebase_token:
                type: string
      responses:
        200:
          description: "successful operation"


  /users/{userId}/notifications/counters:
    get:
      tags:
        - user
      security:
        - Bearer: []
      summary: Returns counters for notifications.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: object
            properties:
              personal_jobs_counter:
                type: integer
                format: int64
              technician_new_jobs:
                type: integer
                format: int64

  /users/{userId}/notifications/counters/reset/personal:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Resets personal notifications counter.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: object
            properties:
              personal_jobs_counter:
                type: integer
                format: int64
              technician_new_jobs:
                type: integer
                format: int64

  /users/{userId}/notifications/counters/reset/technician:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Resets technician notifications counter.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: object
            properties:
              personal_jobs_counter:
                type: integer
                format: int64
              technician_new_jobs:
                type: integer
                format: int64

  /users/{userId}/notifications/technician/online:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Marks technician as online.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/TechnicianUser'

  /users/{userId}/notifications/technician/offline:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Marks technician as offline.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/TechnicianUser'

  /users/{userId}/client:
    get:
      tags:
        - user
      security:
        - Bearer: []
      summary: Receive client with id.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"

  /users/{userId}/technician:
    get:
      tags:
        - user
      security:
        - Bearer: []
      summary: Receive technician with id.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/TechnicianUser'

  /users/{userId}/technician/speciality:
    patch:
      tags:
        - user
      security:
        - Bearer: []
      summary: Receive technician with id.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: speciality
          schema:
            $ref: '#/definitions/TechnicianServicesSpeciality'

      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/TechnicianUserByAdmin'

  /users/{userId}/client/admin:
    get:
      tags:
        - user
      security:
        - Bearer: []
      summary: Receive client with id for admin area.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            allOf:
              - $ref: '#/definitions/User'
            properties:
              commercial_subscribe:
                type: integer

  /users/{userId}/technician/admin:
    get:
      tags:
        - user
      security:
        - Bearer: []
      summary: Receive technician with id for admin area.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: object
            allOf:
             - $ref: '#/definitions/TechnicianUserByAdmin'
            properties:
              commercial_subscribe:
                type: integer

  /users/{userId}/client/invoices:
    get:
      tags:
        - user
      security:
        - Bearer: []
      summary: Returns list of invoices for user. Used by admin.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
        - name: "job_id"
          in: "query"
          description: "job id"
          required: false
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/InvoicesCollection'

  /users/{userId}/technician/invoices:
    get:
      tags:
        - user
      security:
        - Bearer: []
      summary: Returns list of invoices for user. Used by admin.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
        - name: "job_id"
          in: "query"
          description: "job id"
          required: false
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/InvoicesCollection'

  /users/{userId}/technician/commission:
    get:
      tags:
        - user
      security:
        - Bearer: []
      summary: Returns commission for technician.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Commission'
    patch:
      tags:
        - user
      security:
        - Bearer: []
      summary: Updates commission for technician.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: commission object
          schema:
            $ref: '#/definitions/Commission'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Commission'

  /users/{userId}/activate:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Activate user manually.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        204:
          description: "successful operation"

  /users/{userId}/technician/female_only:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Marks technician as "Able to Cater to Female Only Cleaning Requests".
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        202:
          description: "successful operation"
          schema:
            $ref: '#/definitions/TechnicianUser'

  /users/{userId}/technician/lock:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Marks technician as locked.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/TechnicianUser'

  /users/{userId}/technician/unlock:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Marks technician as unlocked.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/TechnicianUser'

  /users/{userId}/client/lock:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Marks client as locked.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/ClientUser'

  /users/{userId}/client/unlock:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Marks client as unlocked.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/ClientUser'


  /users/{userId}/technician/allow_multy_job:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Enable user to accept multiple jobs in the same time.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/TechnicianUser'

  /users/{userId}/technician/deny_multy_job:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Disable user to accept multiple jobs in the same time.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/TechnicianUser'

  /users/{userId}/technician/allow_accept_job:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Enable possibility for company technician to accept jobs.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/TechnicianUser'

  /users/{userId}/technician/deny_accept_job:
    post:
      tags:
        - user
      security:
        - Bearer: []
      summary: Disable possibility for company technician to accept jobs.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/TechnicianUser'

  /users/{userId}/jobs:
    get:
      tags:
        - user
      security:
        - Bearer: []
      summary: Returns jobs that related to user.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/JobsCollection'

  /users/{userId}/technician/available:
    get:
      tags:
        - user
      security:
        - Bearer: []
      summary: The technician available at scheduled date.
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of technician"
          required: true
          type: "integer"
          format: "int64"
        - name: "scheduled_date"
          in: "query"
          description: "job scheduled date"
          required: true
          type: integer
          format: uint64
      responses:
        200:
          description: "successful operation"
          schema:
            type: object
            properties:
              available:
                type: boolean

  /users:
    get:
      tags:
        - user
      security:
        - Bearer: []
      summary: Receive all users. Available only for admin.
      consumes:
        - application/json
      parameters:
        - name: "only_locked_technicians"
          in: "query"
          description: "Returns only locked technicians"
          required: false
          type: boolean
        - name: "only_locked_clients"
          in: "query"
          description: "Returns only locked clients"
          required: false
          type: boolean
        - name: "female_only"
          in: "query"
          description: "Returns only technicians with female_only flag"
          type: boolean
          required: false
        - name: user_type_flag
          in: "query"
          description: "Filter by user flags."
          required: false
          type: "integer"
          format: "int8"
        - name: "phone_number"
          in: "query"
          description: "Search by phone number. Can't be used with other filters"
          required: false
          type: "string"
        - name: "full_name"
          in: "query"
          description: "Search by full name. Can't be used with other filters"
          required: false
          type: "string"
        - name: "user_id"
          in: "query"
          description: "Search by user id. Can't be used with other filters"
          required: false
          type: "integer"
          format: "int64"
        - name: "with_debt_to_myhome"
          in: "query"
          description: "Returns technicians with debt to myhome"
          required: false
          type: boolean
        - name: "with_debt_to_technician"
          in: "query"
          description: "Returns technicians with debt from myhome"
          required: false
          type: boolean
        - name: "sort_by"
          in: "query"
          description: "Sorting jobs by create date. 0 - newest, 1 - oldest"
          required: false
          type: "integer"
          format: "int32"
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/UsersCollection'

  /tokens/refresh:
    post:
      tags:
        - token
      summary: Resfresh token.
      consumes:
        - application/json
      parameters:
        - in: body
          name: refresh token
          description: Refresh token.
          schema:
            type: object
            required:
              - refresh_token
            properties:
              refresh_token:
                type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Token'


  /verification/user/{userId}/send/sms:
    post:
      tags:
        - verification
      security:
        - Bearer: []
      summary: Sends confirmation code via sms. Used for confirmation.
      description: Rate limit `30 secs`
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"


  /verification/phone/{phone}/send/sms:
    post:
      tags:
        - verification
      summary: Sends confirmation code via sms. Used for password restoring.
      description: Rate limit `60 secs`
      parameters:
        - name: "phone"
          in: "path"
          description: "phone number of user"
          required: true
          type: string
      responses:
        200:
          description: "successful operation"


  /verification/user/{userId}/code/{code}/activate:
    post:
      tags:
        - verification
      security:
        - Bearer: []
      summary: Checks confirmation code and activates account.
      description: Returns active token, which can be used in most endpoints.
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
        - name: "code"
          in: "path"
          description: "Confirmation code"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/Token'

  /verification/phone/{phone}/code/{code}/restore:
    post:
      tags:
        - verification
      summary: Checks confirmation code and returns token for password update.
      description: Returns token, which can be used only for password restoring endpoint. Token will expire after `15 minutes`.
      parameters:
        - name: "phone"
          in: "path"
          description: "Phone number of user"
          required: true
          type: "integer"
          format: "int64"
        - name: "code"
          in: "path"
          description: "Confirmation code"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/Token'

  /services:
    get:
      tags:
        - service

      summary: Receive list of services.
      parameters:
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
        - name: "return_all_localization"
          in: query
          description: "It true, response will return all localization that we have. Used for admin panel."
          required: false
          type: boolean
          default: false
        - name: "return_only_disable"
          in: query
          description: "It true, response will return only all disable services. Used for admin panel."
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/ServiceCollection'

    put:
      tags:
        - service
      security:
        - Bearer: []
      summary: Creates new service. Admin area.
      parameters:
        - in: body
          name: service object
          schema:
            $ref: '#/definitions/Service'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Service'

  /services/{serviceId}:
    get:
      tags:
        - service
      summary: Receive service with ID.
      parameters:
        - name: "serviceId"
          in: "path"
          description: "ID of service"
          required: true
          type: "integer"
          format: "int64"
        - name: "return_all_localization"
          in: query
          description: "It true, response will return all localization that we have. Used for admin panel."
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Service'

    patch:
      tags:
        - service
      security:
      - Bearer: []
      summary: Updates service with given ID. Admin area.
      parameters:
        - name: "serviceId"
          in: "path"
          description: "ID of service"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: service object
          schema:
            $ref: '#/definitions/Service'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Service'

    delete:
      tags:
        - service
      security:
      - Bearer: []
      summary: Deletes Service with given ID. Admin area.
      parameters:
        - name: "serviceId"
          in: "path"
          description: "ID of service"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"

  /services/{serviceId}/disable:
    post:
      tags:
        - service
      security:
      - Bearer: []
      summary: Disables Service with given ID. Admin area.
      parameters:
        - name: "serviceId"
          in: "path"
          description: "ID of service"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Service'

  /services/{serviceId}/enable:
    post:
      tags:
        - service
      security:
      - Bearer: []
      summary: Enamble Service with given ID. Admin area.
      parameters:
        - name: "serviceId"
          in: "path"
          description: "ID of service"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Service'

  /services/{serviceId}/units:
    get:
      tags:
        - service
      summary: Receive units for service.
      parameters:
        - name: "serviceId"
          in: "path"
          description: "ID of service"
          required: true
          type: "integer"
          format: "int64"
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
        - name: "return_all_localization"
          in: query
          description: "It true, response will return all localization that we have. Used for admin panel."
          required: false
          type: boolean
          default: false
        - name: "return_only_disable"
          in: query
          description: "It true, response will return only all disable units. Used for admin panel."
          required: false
          type: boolean
          default: false
        - name: "nested_names"
          in: query
          description: "If true, response will return names of unit and service."
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/UnitsCollection'

    put:
      tags:
        - service
      security:
        - Bearer: []
      summary: Creates new unit. Admin area.
      parameters:
        - name: "serviceId"
          in: "path"
          description: "ID of service"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: service object
          schema:
            $ref: '#/definitions/Unit'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Unit'

  /units:
    get:
      tags:
        - unit
      summary: Receive all units.
      parameters:
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
        - name: "return_all_localization"
          in: query
          description: "It true, response will return all localization that we have. Used for admin panel."
          required: false
          type: boolean
          default: false
        - name: "nested_names"
          in: query
          description: "If true, response will return names of service."
          required: false
          type: boolean
          default: false
        - name: "return_only_disable"
          in: query
          description: "It true, response will return only all disable units. Used for admin panel."
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/UnitsCollection'


  /units/{unitId}:
    get:
      tags:
        - unit
      summary: Receive unit with ID.
      parameters:
        - name: "unitId"
          in: "path"
          description: "ID of unit"
          required: true
          type: "integer"
          format: "int64"
        - name: "return_all_localization"
          in: query
          description: "It true, response will return all localization that we have. Used for admin panel."
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Unit'

    patch:
      tags:
        - unit
      security:
      - Bearer: []
      summary: Updates unit with given ID. Admin area.
      parameters:
        - name: "unitId"
          in: "path"
          description: "ID of unit"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: service object
          schema:
            $ref: '#/definitions/Unit'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Unit'

    delete:
      tags:
        - unit
      security:
      - Bearer: []
      summary: Deletes unit with given ID. Admin area.
      parameters:
        - name: "unitId"
          in: "path"
          description: "ID of unit"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"

  /units/{unitId}/disable:
    post:
      tags:
        - unit
      security:
      - Bearer: []
      summary: Disables Unit with given ID. Admin area.
      parameters:
        - name: "unitId"
          in: "path"
          description: "ID of unit"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Unit'

  /units/{unitId}/enable:
    post:
      tags:
        - unit
      security:
      - Bearer: []
      summary: Enable Unit with given ID. Admin area.
      parameters:
        - name: "unitId"
          in: "path"
          description: "ID of unit"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Unit'

  /units/{unitId}/issues:
    get:
      tags:
        - unit
      summary: Receive issues for unit.
      parameters:
        - name: "unitId"
          in: "path"
          description: "ID of unit"
          required: true
          type: "integer"
          format: "int64"
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
        - name: "return_all_localization"
          in: query
          description: "It true, response will return all localization that we have. Used for admin panel."
          required: false
          type: boolean
          default: false
        - name: "return_only_disable"
          in: query
          description: "It true, response will return only all disable issues. Used for admin panel."
          required: false
          type: boolean
          default: false
        - name: "nested_names"
          in: query
          description: "If true, response will return names of unit and service."
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/IssuesCollection'

    put:
      tags:
        - unit
      security:
        - Bearer: []
      summary: Creates new issue. Admin area.
      parameters:
        - name: "unitId"
          in: "path"
          description: "ID of unit"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: service object
          schema:
            $ref: '#/definitions/Issue'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Issue'

    patch:
      tags:
        - unit
      security:
        - Bearer: []
      summary: Update  a issue position. Admin area.
      parameters:
        - name: "unitId"
          in: "path"
          description: "ID of unit"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: service object
          required: true
          schema:
            type: "object"
            properties:
              positions:
                type: "array"
                items:
                  type: "object"
                  properties:
                    issue_id:
                      required: true
                      type: "integer"
                      format: "int64"
                    position:
                      required: true
                      type: "integer"
                      format: "int64"
      responses:
        204:
          description: "successful operation"

  /issues:
    get:
      tags:
        - issue
      summary: Receive all issues.
      parameters:
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
        - name: "return_all_localization"
          in: query
          description: "If true, response will return all localization that we have. Used for admin panel."
          required: false
          type: boolean
          default: false
        - name: "nested_names"
          in: query
          description: "If true, response will return names of unit and service."
          required: false
          type: boolean
          default: false
        - name: "return_only_disable"
          in: query
          description: "It true, response will return only all disable issues. Used for admin panel."
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/IssuesCollection'

  /issues/{issueId}:
    get:
      tags:
        - issue
      summary: Receive issue with ID.
      parameters:
        - name: "issueId"
          in: "path"
          description: "ID of issue"
          required: true
          type: "integer"
          format: "int64"
        - name: "return_all_localization"
          in: query
          description: "It true, response will return all localization that we have. Used for admin panel."
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Issue'

    patch:
      tags:
        - issue
      security:
      - Bearer: []
      summary: Updates unit with given ID. Admin area.
      parameters:
        - name: "issueId"
          in: "path"
          description: "ID of issue"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: service object
          schema:
            $ref: '#/definitions/Issue'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Issue'

    delete:
      tags:
        - issue
      security:
      - Bearer: []
      summary: Deletes issue with given ID. Admin area.
      parameters:
        - name: "issueId"
          in: "path"
          description: "ID of issue"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"

  /issues/{issueId}/disable:
    post:
      tags:
        - issue
      security:
      - Bearer: []
      summary: Disables Issue with given ID. Admin area.
      parameters:
        - name: "issueId"
          in: "path"
          description: "ID of issue"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Issue'

  /issues/{issueId}/enable:
    post:
      tags:
        - issue
      security:
      - Bearer: []
      summary: Enable Issue with given ID. Admin area.
      parameters:
        - name: "issueId"
          in: "path"
          description: "ID of issue"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Issue'

  /jobs_discount:
    put:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Creates new job.
      parameters:
        - in: body
          name: Job
          description: Job object.
          schema:
            type: object
            required:
              - service_id
              - note
              - address
              - issues
            properties:
              service_id:
                type: integer
                format: uint64
              scheduled_date:
                type: integer
                format: uint64
                description: |
                  Unix timestamp
                  If 0 or empty than job is needed ASAP and
                  when job will be created then asap == true.
              note:
                type: string
              image_urls:
                type: array
                items:
                  type: string
              address:
                $ref: '#/definitions/Address'
              issues:
                type: array
                items:
                  type: object
                  properties:
                    unit_id:
                      type: integer
                      format: uint64
                    issue_id:
                      type: integer
                      format: uint64
                    count:
                      type: integer
                      format: uint8
                    feature_configs:
                      type: array
                      items:
                        $ref: '#/definitions/FeatureConfig'
              discount_codes:
                type: array
                items:
                  type: string

      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/DiscountApiResponse'


  /jobs:
    get:
      tags:
        - job
      security:
      - Bearer: []
      summary: Receive all jobs.
      parameters:
        - name: "phone"
          in: query
          required: false
          description: "Search jobs by phone"
        - name: "sort_by"
          in: "query"
          description: "Sorting jobs by create date. 0 - newest, 1 - oldest"
          required: false
          type: "integer"
          format: "int32"
        - name: "job_id"
          in: "query"
          description: "Search by job id. Can't be used with other filters"
          required: false
          type: "integer"
          format: "int64"
        - name: status
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering job by the status."
        - name: payment_status
          in: "query"
          type: string
          description:   "Filtering job by the payment status. Status may be `paid` or `refunded`"
        - name: services
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering job by the services."
        - name: scheduled_from
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering job by the date from."
        - name: scheduled_to
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering job by the date to."
        - name: active_job
          in: "query"
          type: boolean
          required: false
          description: "Filtering job by active."
        - name: completed_job
          in: "query"
          type: boolean
          required: false
          description: "Filtering job by completed."
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/JobsCollection'

    put:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Creates new job.
      parameters:
        - in: query
          name: favorites
          type: integer
          format: uint64
          description: Set technician id when job create with favorite technician
        - in: body
          name: Job
          description: Job object.
          schema:
            type: object
            required:
              - service_id
              - note
              - address
              - issues
            properties:
              service_id:
                type: integer
                format: uint64
              scheduled_date:
                type: integer
                format: uint64
                description: |
                  Unix timestamp
                  If 0 or empty than job is needed ASAP and
                  when job will be created then asap == true.
              note:
                type: string
              image_urls:
                type: array
                items:
                  type: string
              address:
                $ref: '#/definitions/Address'
              issues:
                type: array
                items:
                  type: object
                  properties:
                    unit_id:
                      type: integer
                      format: uint64
                    issue_id:
                      type: integer
                      format: uint64
                    count:
                      type: integer
                      format: uint8
                    feature_configs:
                      type: array
                      items:
                        $ref: '#/definitions/FeatureConfig'
              discount_codes:
                type: array
                items:
                  type: string

      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Job'

  /jobs/{jobId}:
    get:
      tags:
        - job
      security:
      - Bearer: []
      summary: Receive job with ID.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
#        - name: "with_time_zone"
#          in: query
#          required: false
#          type: boolean
#          description: "Return job with owner time zone"
      responses:
        200:
          description: "successful operation"
          schema:
            allOf:
              - $ref: '#/definitions/Job'
            properties:
              version:
                type: "integer"
                format: "int64"

    patch:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Updates job.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: Job
          description: Job object.
          schema:
            type: object
            properties:
              scheduled_date:
                type: integer
                format: uint64
                description: Unix timestamp
              image_urls:
                type: array
                items:
                  type: string
      responses:
        200:
          description: "successful operation"
          schema:
            allOf:
              - $ref: '#/definitions/Job'
            properties:
              version:
                type: "integer"
                format: "int64"

  /jobs/{jobId}/edit:
    patch:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Edit job.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: Job
          description: Job object.
          schema:
            type: object
            properties:
              assigned_technician_id:
                type: integer
                format: uint64
                description: assigned technician id
              status:
                type: integer
                format: uint64
                description: job status
              scheduled_date:
                type: integer
                format: uint64
                description: Unix timestamp
              note:
                type: string
                description: comment
              female_only:
                type: boolean
                description: Female only
              version:
                type: integer
                format: uint64
                description: document version

      responses:
        200:
          description: "successful operation"
          schema:
            allOf:
              - $ref: '#/definitions/Job'
            properties:
              version:
                type: "integer"
                format: "int64"

  /jobs/{jobId}/edit/technicians:
    get:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Get likely technicians for job.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
        - name: "female_only"
          in: "query"
          description: "Returns female only technicians"
          required: false
          type: boolean
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: '#/definitions/User'

  /jobs/{jobId}/mark/test:
    patch:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Mark job as test.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"

      responses:
        200:
          description: "successful operation"


  /jobs/{jobId}/invoices/final:
    get:
      tags:
        - job
      security:
      - Bearer: []
      summary: Returns final invoice for admin.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/JobsFinalInvoice'

  /jobs/{jobId}/fees:
    get:
      tags:
        - job
      security:
      - Bearer: []
      summary: List of fees for job.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/JobFeesCollection'

    put:
      tags:
        - job
      security:
      - Bearer: []
      summary: Add fee to job. Used by technician.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: fee
          description: Fee object.
          schema:
            $ref: '#/definitions/JobsFee'

      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/JobsFee'

  /jobs/{jobId}/client/cancel:
    post:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Cancel job. Used by client.
      description: 'If canceled by technician, then status will be changed to "available" for other technicians. If canceled by user, then job will be deleted.'
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Job'

  /jobs/{jobId}/client/post:
    post:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Post job. Used by client.
      description: 'If rejected by technician, then client will be posting.'
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Job'

  /jobs/{jobId}/client/wait:
    post:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Post job. Used by client.
      description: 'If rejected by time, then client will be posting to technician again.'
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Job'

  /jobs/{jobId}/technician/cancel:
    post:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Cancel job. Used by technician.
      description: 'If canceled by technician, then status will be changed to "available" for other technicians. If canceled by user, then job will be deleted.'
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Job'

  /jobs/{jobId}/technician/accept:
    post:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Accept job. Used by technician.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Job'

  /jobs/{jobId}/assign/technician/{userId}:
    post:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Assign job to company technician. Used by company admin.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Job'

#  /jobs/{jobId}/company/accept:
#    post:
#      tags:
#        - job
#      security:
#        - Bearer: []
#      consumes:
#        - application/json
#      summary: Accept job. Used by company admin.
#      parameters:
#        - name: "jobId"
#          in: "path"
#          description: "ID of job"
#          required: true
#          type: "integer"
#          format: "int64"
#      responses:
#        200:
#          description: "successful operation"
#          schema:
#            $ref: '#/definitions/Job'

  /jobs/{jobId}/technician/onroute:
    post:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Technician on route. Used by technician.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: Route time estimate in secs
          required: true
          schema:
            type: object
            required:
              - on_route_secs
            properties:
              on_route_secs:
                type: "integer"
                format: "int64"

      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Job'

  /jobs/{jobId}/technician/onsite:
    post:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Technician on site. Used by technician.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Job'


  /jobs/{jobId}/technician/start:
    post:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Starts job. Used by technician.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Job'

  /jobs/{jobId}/technicians/online:
    get:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Receive online technicians.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/UsersCollection'

  /jobs/{jobId}/technician/done:
    post:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Technician finished job. Used by technician.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: rating
          description: Clients rating
          #required: true
          schema:
            type: object
            required:
              - rating
            properties:
              rating:
                type: "integer"
                format: "uint8"
              comment:
                type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Job'

  /jobs/{jobId}/client/done:
    post:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Used to set rating for technician.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: rating
          description: Technician rating
          #required: true
          schema:
            type: object
            required:
              - rating
            properties:
              rating:
                type: "integer"
                format: "uint8"
              comment:
                type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Job'

  /jobs/{jobId}/reject:
    post:
      tags:
        - job
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Technician on site. Used by technician.
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Job'

  /feeds/jobs/client/history:
    get:
      tags:
        - feed
      security:
        - Bearer: []
      summary: Receive completed jobs list.
      consumes:
        - application/json
      parameters:
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobsCollection"

  /feeds/jobs/client/active:
    get:
      tags:
        - feed
      security:
        - Bearer: []
      summary: Receive active jobs list.
      consumes:
        - application/json
      parameters:
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobsCollection"

  /feeds/jobs/client/scheduled:
    get:
      tags:
        - feed
      security:
        - Bearer: []
      summary: Receive scheduled jobs list.
      consumes:
        - application/json
      parameters:
        - name: "from_date"
          in: "query"
          description: "Unix timestamp date"
          required: true
          type: "integer"
          format: "int64"
        - name: "to_date"
          in: "query"
          description: "Unix timestamp date."
          required: true
          type: "integer"
          format: "int64"
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobsCollection"

  /feeds/jobs/client/scheduled/short:
    get:
      tags:
        - feed
      security:
        - Bearer: []
      summary: Returns dates where jobs exists in given time range.
      consumes:
        - application/json
      parameters:
        - name: "from_date"
          in: "query"
          description: "Unix timestamp date"
          required: true
          type: "integer"
          format: "int64"
        - name: "to_date"
          in: "query"
          description: "Unix timestamp date."
          required: true
          type: "integer"
          format: "int64"
        - name: "without_ids"
          in: "query"
          description: "Drops jobs id from response"
          required: false
          type: "boolean"
          default: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobsIDsByDate"

  /feeds/jobs/technician/history:
    get:
      tags:
        - feed
      security:
        - Bearer: []
      summary: Receive completed jobs list for technician.
      consumes:
        - application/json
      parameters:
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobsCollection"

  /feeds/jobs/technician/active:
    get:
      tags:
        - feed
      security:
        - Bearer: []
      summary: Receive active jobs list for technician.
      consumes:
        - application/json
      parameters:
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobsCollection"

  /feeds/jobs/technician/scheduled:
    get:
      tags:
        - feed
      security:
        - Bearer: []
      summary: Receive scheduled jobs list for technician.
      consumes:
        - application/json
      parameters:
        - name: "from_date"
          in: "query"
          description: "Unix timestamp date"
          required: true
          type: "integer"
          format: "int64"
        - name: "to_date"
          in: "query"
          description: "Unix timestamp date."
          required: true
          type: "integer"
          format: "int64"
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobsCollection"

  /feeds/jobs/technician/scheduled/short:
    get:
      tags:
        - feed
      security:
        - Bearer: []
      summary: Returns dates where jobs exists in given time range.
      consumes:
        - application/json
      parameters:
        - name: "from_date"
          in: "query"
          description: "Unix timestamp date"
          required: true
          type: "integer"
          format: "int64"
        - name: "to_date"
          in: "query"
          description: "Unix timestamp date."
          required: true
          type: "integer"
          format: "int64"
        - name: "withoutIds"
          in: "query"
          description: "Drops jobs id from response"
          required: false
          type: "boolean"
          default: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobsIDsByDate"

  /feeds/jobs/technician/available:
    get:
      tags:
        - feed
      security:
        - Bearer: []
      summary: Receive available jobs for technician.
      consumes:
        - application/json
      parameters:
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobsCollection"

  /feeds/jobs/company/available:
    get:
      tags:
        - feed
      security:
        - Bearer: []
      summary: Receive available jobs for company.
      consumes:
        - application/json
      parameters:
        - name: "phone"
          in: query
          required: false
          description: "Search jobs by phone"
        - name: "sort_by"
          in: "query"
          description: "Sorting jobs by create date. 0 - newest, 1 - oldest"
          required: false
          type: "integer"
          format: "int32"
        - name: "job_id"
          in: "query"
          description: "Search by job id. Can't be used with other filters"
          required: false
          type: "integer"
          format: "int64"
        - name: services
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering job by the services."
        - name: scheduled_from
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering job by the date from."
        - name: scheduled_to
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering job by the date to."
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobsCollection"

  /feeds/favorites:
    get:
      tags:
        - feed
      security:
        - Bearer: []
      summary: Get favorites technician by client (extracting a client id of  token)
      consumes:
        - application/json
      parameters:
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: '#/definitions/FavoriteTechnician'


  /invoices/{invoiceId}:
    get:
      tags:
        - invoices
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Receive invoice.
      parameters:
        - name: "invoiceId"
          in: "path"
          description: "ID of invoice"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Invoice'

  /invoices/{invoiceId}/admin:
    get:
      tags:
        - invoices
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Receive invoice for admin.
      parameters:
        - name: "invoiceId"
          in: "path"
          description: "ID of invoice"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Invoice'

  /invoices/{invoiceId}/admin/commissions/resolve:
    post:
      tags:
        - invoices
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Marks invoices commission as resolved.
      parameters:
        - name: "invoiceId"
          in: "path"
          description: "ID of invoice"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Invoice'

  /invoices/{invoiceId}/admin/commissions/unresolve:
    post:
      tags:
        - invoices
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Marks invoices commission as not resolved.
      parameters:
        - name: "invoiceId"
          in: "path"
          description: "ID of invoice"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Invoice'


  /invoices/{invoiceId}/pay/cash:
    post:
      tags:
        - invoices
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Set invoice status as paid with cash.
      parameters:
        - name: "invoiceId"
          in: "path"
          description: "ID of invoice"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Invoice'

  /invoices/{invoiceId}/pay/knet:
    post:
      tags:
        - invoices
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Returns URL for payment processing with KNET. Client should open it in webview.
      description: |
        URL has 7 minutes lifetime on KNET side.
        On backend this URL will be cached for 5 minutes.
        When URL loaded, the client will able to pay an invoice with KNET.
        At the end, the client will be redirected to "result page" where he will see "Back To App" button.
        This button has next URL:
        ```
        myhomeclientapp://action/invoice_payment_result?invoice=eyJpZCI6Miwiam9iX2lkIjoxLCJmZWVfaWQiOjEsInN0YXR1cyI6MSwiam9iX3N0YXR1cyI6NSwicGF5bWVudF90eXBlIjoyLCJwcmljZSI6eyJjdXJyZW5jeSI6IktXIiwidmFsdWUiOiI0MiJ9fQ%3D%3D
        ```
        As you can see there is `invoice` query parameter.
        The `invoice` value was generated by next algorithm:
        ```
        URLQueryEscape(
          Base64(
            {
              "id":2,
              "job_id":1,
              "fee_id":1,
              "status":1, // 1 - payment was unsuccessful; 2 - successful
              "job_status":5,
              "payment_type":2,
              "price": {
                "currency":"KW",
                "value":"42"
              }
            }
          )
        )
        ```
        The application should close webview when this URL schema processed.

      parameters:
        - name: "invoiceId"
          in: "path"
          description: "ID of invoice"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: object
            properties:
              payment_url:
                type: string

  /invoices/{invoiceId}/pay/tap:
    post:
      tags:
        - invoices
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Returns URL for payment processing with TAP. Client should open it in webview.
      description: |
        URL has 7 minutes lifetime on TAP side.
        On backend this URL will be cached for 5 minutes.
        When URL loaded, the client will able to pay an invoice with TAP.
        At the end, the client will be redirected to "result page" where he will see "Back To App" button.
        This button has next URL:
        ```
        myhomeclientapp://action/invoice_payment_result?invoice=eyJpZCI6Miwiam9iX2lkIjoxLCJmZWVfaWQiOjEsInN0YXR1cyI6MSwiam9iX3N0YXR1cyI6NSwicGF5bWVudF90eXBlIjoyLCJwcmljZSI6eyJjdXJyZW5jeSI6IktXIiwidmFsdWUiOiI0MiJ9fQ%3D%3D
        ```
        As you can see there is `invoice` query parameter.
        The `invoice` value was generated by next algorithm:
        ```
        URLQueryEscape(
          Base64(
            {
              "id":2,
              "job_id":1,
              "fee_id":1,
              "status":1, // 1 - payment was unsuccessful; 2 - successful
              "job_status":5,
              "payment_type":2,
              "price": {
                "currency":"KW",
                "value":"42"
              }
            }
          )
        )
        ```
        The application should close webview when this URL schema processed.

      parameters:
        - name: "invoiceId"
          in: "path"
          description: "ID of invoice"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: object
            properties:
              payment_url:
                type: string

  /invoices/{invoiceId}/refund/tap:
    post:
      tags:
        - invoices
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Make refund for invoice using TAP.
      description: |
        Possible invoice statuses is
        3 - on refund(pending)
        4 - refunded
      parameters:
        - name: "invoiceId"
          in: "path"
          description: "ID of invoice"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Invoice'

  /invoices/{invoiceId}/admin/refounded/withtype/{refoundType}:
    post:
      tags:
        - invoices
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Marks invoice as refounded.
      parameters:
        - name: "invoiceId"
          in: "path"
          description: "ID of invoice"
          required: true
          type: "integer"
          format: "int64"
        - name: "refoundType"
          in: "path"
          description: "Type of refound: 1 - refounded with cash, 2 - refounded with card."
          required: true
          type: "integer"
          format: "int8"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Invoice'

  /invoices/{invoiceId}/admin/notrefounded:
    post:
      tags:
        - invoices
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Marks invoice as not refounded.
      parameters:
        - name: "invoiceId"
          in: "path"
          description: "ID of invoice"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Invoice'


  /fees/{feeId}:
    get:
      tags:
        - fee
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Receive fee.
      parameters:
        - name: "feeId"
          in: "path"
          description: "ID of fee"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/JobsFee'

  /resources/attachments/upload/request:
    get:
      tags:
        - resources
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Returns presigned url for uploading.
      description: |
        Returns presigned aws s3 URL.
        You should provide exact size of your resource because URL will be signed with that value.
        Rate limits - 5 requests per minute.
        URL lifetime - 15 minutes.
        Max `resource_bytes_count` value - 5242880 (5 MB)
        Upload to S3 sample with `curl` -
        ```
          curl -v --upload-file $filename -H "x-amz-acl: public-read" $upload_signed_url
        ```
      parameters:
        - in: query
          name: resource_bytes_count
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation"
          schema:
            type: object
            properties:
              upload_signed_url:
                type: string
              public_url:
                type: string

  /resources/attachments/upload/batch/request:
    get:
      tags:
        - resources
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Returns batch of presigned urls for uploading.
      description: |
        Returns presigned aws s3 URLs.
        You should provide exact size of your resources because URL will be signed with that value.
        Rate limits - 1 requests per minute.
        URL lifetime - 15 minutes.
        Max lenght of `resources_bytes_count` - 5
        Max value for element of `resources_bytes_count` - 5242880 (5 MB)
        Upload to S3 sample with `curl` -
        ```
          curl -v --upload-file $filename -H "x-amz-acl: public-read" $upload_signed_url
        ```
      parameters:
        - in: query
          name: resource_bytes_count
          type: "array"
          items:
            type: integer
            format: int64
      responses:
        200:
          description: "successful operation"
          schema:
            type: object
            properties:
              urls:
                type: "array"
                items:
                  type: object
                  properties:
                    upload_signed_url:
                      type: string
                    public_url:
                      type: string

  /resources/avatars/upload/request:
    get:
      tags:
        - resources
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Returns presigned url for uploading.
      description: |
        Returns presigned aws s3 URL.
        You should provide exact size of your resource because URL will be signed with that value.
        Rate limits - 5 requests per minute.
        URL lifetime - 15 minutes.
        Max `resource_bytes_count` value - 5242880 (5 MB)
        Upload to S3 sample with `curl` -
        ```
          curl -v --upload-file $filename -H "x-amz-acl: public-read" $upload_signed_url
        ```
      parameters:
        - in: query
          name: resource_bytes_count
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation"
          schema:
            type: object
            properties:
              upload_signed_url:
                type: string
              public_url:
                type: string

  /resources/attachments/upload/refresh_request:
    post:
      tags:
        - resources
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Returns new signed url from public url.
      description: |
        Once signed url is expired, it is expected to have a way to generate new signed url from public url.
      parameters:
        - in: body
          name: public_url
          schema:
            type: object
            required:
              - public_url
            properties:
              public_url:
                type: string
      responses:
        200:
          description: "successful operation"
          schema:
            type: object
            properties:
              upload_signed_url:
                type: string
              public_url:
                type: string

  /addresses/areas:
    get:
      tags:
        - addresses
      consumes:
        - application/json
      summary: Receive areas with nested gevernates.
      parameters:
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/AreaAndGovernateCollection'

  /addresses/areas/{areaId}:
    delete:
      tags:
        - addresses
      security:
        - Bearer: []
      summary: Delete area by ID.
      consumes:
        - application/json
      parameters:
        - name: "areaId"
          in: "path"
          description: "ID of saved area"
          required: true
          type: "integer"
      responses:
        202:
          description: "successful operation"

  /addresses/areas/info/{areaId}:
    get:
      tags:
        - addresses
      consumes:
        - application/json
      summary: Receive areas by id.
      parameters:
        - name: "areaId"
          in: "path"
          description: "ID of area"
          required: false
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/AreaAndGovernate'

  /addresses/areas/find/{text}:
    get:
      tags:
        - addresses
      consumes:
        - application/json
      summary: Find areas and gevernates.
      parameters:
        - name: "text"
          in: "path"
          description: "Piece of name area or governate"
          required: true
          type: "string"
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/AreaAndGovernateCollection'

  /addresses/users/{userId}/exists:
    get:
      tags:
        - addresses
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Check if saved adresses are presented for user.
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: boolean

  /addresses/users/{userId}:
    get:
      tags:
        - addresses
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Receive saved addresses for user.
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "string"
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/AddressCollection'

  /addresses/job_addresses/{jobAddressId}:
    delete:
      tags:
        - addresses
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Deletes job address by given ID.
      parameters:
        - name: "jobAddressId"
          in: "path"
          description: "ID of saved address"
          required: true
          type: "integer"
      responses:
        200:
          description: "successful operation"

    patch:
      tags:
        - addresses
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Updates job address by given ID.
      parameters:
        - name: "jobAddressId"
          in: "path"
          description: "ID of saved address"
          required: true
          type: "string"
        - in: body
          name: address
          schema:
            $ref: '#/definitions/Address'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Address'

  /stats/short:
    get:
      tags:
        - stats
      consumes:
        - application/json
      summary: Returns short stats from DB.
      description: Uses cache. Cache lifetime - 25 secs.
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/ShortStats'

  /stats/jobs:
    get:
      tags:
        - stats
      consumes:
        - application/json
      summary: Returns jobs stats from DB.
      parameters:
        - name: client_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering job by the client id."
        - name: technician_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering job by the technician id."
        - name: services
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering job by the services."
        - name: date_from
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering job by the date from."
        - name: date_to
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering job by the date to."
        - name: company_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering job by the company id."
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/JobsStats'

  /stats/invoices:
    get:
      tags:
        - stats
      consumes:
        - application/json
      summary: Returns invoices stats from DB.
      parameters:
        - name: client_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering invoices by the client id."
        - name: technician_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering invoices by the technician id."
        - name: services
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering invoices by the services."
        - name: date_from
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering invoices by the date from."
        - name: date_to
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering invoices by the date to."
        - name: company_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering invoices by the company id."
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/InvoiceStats'

  /stats/discounts:
    get:
      tags:
        - stats
      consumes:
        - application/json
      summary: Returns discounts stats from DB.
      parameters:
        - name: client_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering invoices by the client id."
        - name: technician_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering invoices by the technician id."
        - name: services
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering invoices by the services."
        - name: date_from
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering invoices by the date from."
        - name: date_to
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering invoices by the date to."
        - name: company_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering invoices by the company id."
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/DiscountStats'

  /settings/favorites/reject:
    get:
      tags:
        - settings
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Returns reject time if technician did'n accept job.
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/RejectTime'

    patch:
      tags:
        - settings
      security:
        - Bearer: []
      summary: Updates reject time if technician did'n accept job.
      consumes:
        - application/json
      parameters:
        - in: body
          name: reject time
          schema:
            $ref: '#/definitions/RejectTime'
      responses:
        200:
          description: "successful operation"

  /settings/scheduleddate/range:
    get:
      tags:
        - settings
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Returns range time when technician available.
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/TechnicianAvailableTime'

    patch:
      tags:
        - settings
      security:
        - Bearer: []
      summary: Updates range time when technician available.
      consumes:
        - application/json
      parameters:
        - in: body
          name: reject time
          schema:
            $ref: '#/definitions/TechnicianAvailableTime'
      responses:
        200:
          description: "successful operation"

  /settings/commissions:
    get:
      tags:
        - settings
      security:
        - Bearer: []
      consumes:
        - application/json
      summary: Returns global commissions.
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Commission'

    patch:
      tags:
        - settings
      security:
        - Bearer: []
      summary: Updates global commission.
      consumes:
        - application/json
      parameters:
        - in: body
          name: commission object
          schema:
            $ref: '#/definitions/Commission'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Commission'

  /settings/working_hours:
    get:
      tags:
        - settings
      security:
        - Bearer: []
      summary: Get global working hours.
      consumes:
        - application/json
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/WorkingHours'

    patch:
      tags:
        - settings
      security:
        - Bearer: []
      summary: Updates global working hours.
      consumes:
        - application/json
      parameters:
        - in: body
          name: working hours
          schema:
            $ref: '#/definitions/WorkingHoursUpdate'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/WorkingHours'


  /settings/working_hours/enable:
    post:
      tags:
        - settings
      security:
        - Bearer: []
      summary: Enable global working hours.
      consumes:
        - application/json
      responses:
        200:
          description: "successful operation"

  /settings/working_hours/disable:
    post:
      tags:
        - settings
      security:
        - Bearer: []
      summary: Disable global working hours.
      consumes:
        - application/json
      responses:
        200:
          description: "successful operation"

  /settings/global_push_notification:
    post:
      tags:
        - settings
      security:
        - Bearer: []
      summary: Send global push notification.
      consumes:
        - application/json
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/GlobalNotificationParams'
      responses:
        200:
          description: "successful operation"

  /zones:
    get:
      tags:
        - zone
      security:
      - Bearer: []
      summary: Receive all zones.
      parameters:
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
        - name: "with_areas"
          in: "path"
          description: "Set 1 to get not empty areas collection"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/ZoneCollection'

    put:
      tags:
        - zone
      security:
      - Bearer: []
      summary: Updates zone with given ID. Admin area.
      parameters:
        - name: "zoneId"
          in: "path"
          description: "ID of zone"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: zone object
          schema:
            $ref: '#/definitions/Zone'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Zone'

    patch:
      tags:
        - zone
      security:
      - Bearer: []
      summary: Updates zone with given ID. Admin area.
      parameters:
        - name: "zoneId"
          in: "path"
          description: "ID of zone"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: zone object
          schema:
            $ref: '#/definitions/Zone'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Zone'
  /zones/{zoneId}:
    delete:
      tags:
        - zone
      security:
      - Bearer: []
      summary: Deletes zone with given ID. Admin area.
      parameters:
        - name: "zoneId"
          in: "path"
          description: "ID of zone"
          required: true
          type: "integer"
          format: "int64"
        - name: "with_areas"
          in: "path"
          description: "Set 1 to get not empty areas collection"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"

    get:
      tags:
        - zone
      security:
      - Bearer: []
      summary: Receive zone with ID.
      parameters:
        - name: "zoneId"
          in: "path"
          description: "ID of zone"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Zone'

  /requests:
    get:
      tags:
        - requests
      security:
      - Bearer: []
      summary: Receive requests list. Admin area.
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/RequestAdminCollection'

  /requests/approve/{id}:
    post:
      tags:
        - requests
      security:
      - Bearer: []
      summary: Approve technician request. Admin area.
      responses:
        200:
          description: "successful operation"

  /requests/decline/{id}:
    post:
      tags:
        - requests
      security:
      - Bearer: []
      summary: Decline technician request. Admin area.
      responses:
        200:
          description: "successful operation"

  /requests/cancel/{id}:
    post:
      tags:
        - requests
      security:
      - Bearer: []
      summary: Cancel technician's request. Used by technician.
      responses:
        200:
          description: "successful operation"

  /requests/find/{text}:
    get:
      tags:
        - requests
      consumes:
        - application/json
      summary: Find requests by fullname.
      parameters:
        - name: "text"
          in: "path"
          description: "Piece of technician fullname"
          required: true
          type: "string"
        - name: "page"
          in: "query"
          description: "Page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_per_page"
          in: "query"
          description: "Items per page for pagination"
          required: false
          type: "integer"
          format: "int64"
        - name: "items_after"
          in: "query"
          description: "Returns items after id which will be specified here"
          required: false
          type: "integer"
          format: "int64"
        - name: "pagination_type"
          in: query
          description: "Type of pagination. Supports `scroll` and `pages`. PAGES SHOULD BE USED ONLY FOR ADMIN PANEL."
          required: false
          type: string
          default: scroll
          enum:
            - scroll
            - pages
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/RequestAdminCollection'

  /working_hours/service/{id}:
    get:
      tags:
        - working_hours
      security:
      - Bearer: []
      summary: Receive working hours for service. Global working hours used if service working hours not defined.
      parameters:
        - name: "id"
          in: "path"
          description: "ID of service"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/WorkingHours'
    patch:
      tags:
        - working_hours
      security:
      - Bearer: []
      summary: Updates service working hours. Admin area.
      parameters:
        - name: "id"
          in: "path"
          description: "ID of service"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: working hours
          schema:
            $ref: '#/definitions/WorkingHoursUpdate'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/WorkingHours'

  /working_hours/service/{id}/enable:
    post:
      tags:
        - working_hours
      security:
      - Bearer: []
      summary: Enable is_now_available option of service working hours. Admin area.
      parameters:
        - name: "id"
          in: "path"
          description: "ID of service"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/WorkingHours'

  /working_hours/service/{id}/disable:
    post:
      tags:
        - working_hours
      security:
      - Bearer: []
      summary: Disable is_now_available option of service working hours. Admin area.
      parameters:
        - name: "id"
          in: "path"
          description: "ID of service"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/WorkingHours'

  /subscriptions/{userId}/commercial:
    patch:
      tags:
        - subscribe
      security:
        - Bearer: []
      summary: Unsubscribe commercial communication by admin
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"

  /subscriptions/{code}/commercial:
    patch:
      tags:
        - subscribe
      security:
        - Bearer: []
      summary: Unsubscribe commercial communication by user  via email
      parameters:
        - name: "code"
          in: "path"
          description: "special code"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"

  /exports/jobs:
    get:
      tags:
        - export
      security:
      - Bearer: []
      summary: Export all jobs.
      parameters:
        - name: "phone"
          in: query
          required: false
          description: "Search jobs by phone"
        - name: "sort_by"
          in: "query"
          description: "Sorting jobs by create date. 0 - newest, 1 - oldest, 2 - A-Z by clients, 3 - Z-A by clients, 4 - A-Z by technicians, 5 - Z-A by technicians"
          required: false
          type: "integer"
          format: "int32"
        - name: "job_id"
          in: "query"
          description: "Search by job id. Can't be used with other filters"
          required: false
          type: "integer"
          format: "int64"
        - name: status
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering job by the status."
        - name: client_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering job by the client id."
        - name: technician_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering job by the technician id."
        - name: payment_status
          in: "query"
          type: string
          description:   "Filtering job by the payment status. Status may be `paid` or `refunded`"
        - name: services
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering job by the services."
        - name: date_from
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering job by the date from."
        - name: date_to
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering job by the date to."
        - name: active_job
          in: "query"
          type: boolean
          required: false
          description: "Filtering job by active."
        - name: completed_job
          in: "query"
          type: boolean
          required: false
          description: "Filtering job by completed."
        - name: company_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering job by the company id."
        - name: limit
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Limit jobs into response."
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/JobsExportCollection'

  /exports/company/jobs:
    get:
      tags:
        - export
      security:
      - Bearer: []
      summary: Export all jobs.
      parameters:
        - name: "phone"
          in: query
          required: false
          description: "Search jobs by phone"
        - name: "sort_by"
          in: "query"
          description: "Sorting jobs by create date. 0 - newest, 1 - oldest"
          required: false
          type: "integer"
          format: "int32"
        - name: "job_id"
          in: "query"
          description: "Search by job id. Can't be used with other filters"
          required: false
          type: "integer"
          format: "int64"
        - name: status
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering job by the status."
        - name: services
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering job by the services."
        - name: date_from
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering job by the date from."
        - name: date_to
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering job by the date to."
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/JobsExportCollection'

  /exports/invoices:
    get:
      tags:
        - export
      security:
      - Bearer: []
      summary: Export all invoices.
      parameters:
        - name: client_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering invoices by the client id."
        - name: technician_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering invoices by the technician id."
        - name: services
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering invoices by the services."
        - name: date_from
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering invoices by the date from."
        - name: date_to
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering invoices by the date to."
        - name: company_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering invoices by the company id."
        - name: limit
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Limit invoices into response."
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/InvoicesExportCollection'

  /exports/discounts:
    get:
      tags:
        - export
      security:
      - Bearer: []
      summary: Export all invoices.
      parameters:
        - name: client_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering invoices by the client id."
        - name: technician_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering invoices by the technician id."
        - name: services
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering invoices by the services."
        - name: date_from
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering invoices by the date from."
        - name: date_to
          in: "query"
          type: integer
          format: uint64
          required: false
          description: "Filtering invoices by the date to."
        - name: company_id
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Filtering invoices by the company id."
        - name: limit
          in: "query"
          type: integer
          format: int32
          required: false
          description: "Limit invoices into response."
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/DiscountsExportCollection'

  /exports/users/clients:
    get:
      tags:
        - export
      security:
      - Bearer: []
      summary: Export all clients.
      parameters:
        - name: "only_locked_clients"
          in: "query"
          description: "Returns only locked clients"
          required: false
          type: boolean
        - name: user_type_flag
          in: "query"
          description: "Filter by user flags."
          required: false
          type: "integer"
          format: "int8"
        - name: "phone_number"
          in: "query"
          description: "Search by phone number. Can't be used with other filters"
          required: false
          type: "string"
        - name: "full_name"
          in: "query"
          description: "Search by full name. Can't be used with other filters"
          required: false
          type: "string"
        - name: "user_id"
          in: "query"
          description: "Search by user id. Can't be used with other filters"
          required: false
          type: "integer"
          format: "int64"
        - name: "sort_by"
          in: "query"
          description: "Sorting jobs by create date. 0 - newest, 1 - oldest, 2 - A-Z by clients, 3 - Z-A by clients"
          required: false
          type: "integer"
          format: "int32"
      responses:
        200:
          description:  "successful operation"
          schema:
            $ref: '#/definitions/ClientsExportCollection'

  /favorites/{technicianId}:
    get:
      tags:
        - favorites
      security:
      - Bearer: []
      summary: Get favorite technician for client
      parameters:
        - name: "technicianId"
          in: "path"
          description: "ID of technician"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/FavoriteTechnician'
    post:
      tags:
        - favorites
      security:
      - Bearer: []
      summary: Add a technician to client as favorite
      parameters:
        - name: "technicianId"
          in: "path"
          description: "ID of technician"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"

    delete:
      tags:
        - favorites
      security:
      - Bearer: []
      summary: Delete a favorite technician into a client
      parameters:
        - name: "technicianId"
          in: "path"
          description: "ID of technician"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"

  /follow_up:
    get:
      tags:
        - follow_up
      summary: Receive list of follow up. Admin area
      security:
      - Bearer: []
      parameters:
        - name: "follow_up_id"
          in: "query"
          description: "ID of follow up"
          required: false
          type: "integer"
          format: "int64"
        - name: "status"
          in: "query"
          description: "status of follow up"
          required: false
          type: "integer"
          format: "int64"
        - name: "job_id"
          in: "query"
          description: "job id of follow up"
          required: false
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/FollowUpAdminCollection'

  /follow_up/{id}/decline:
    post:
      tags:
        - follow_up
      summary: Declines follow up. Admin area
      security:
      - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          description: "ID of follow up"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"

  /follow_up/{id}/accept/{userId}:
    post:
      tags:
        - follow_up
      summary: Declines follow up. Admin area
      security:
      - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          description: "ID of follow up"
          required: true
          type: "integer"
          format: "int64"
        - name: "userId"
          in: "path"
          description: "ID of technician"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"

  /follow_up/jobs/{jobId}:
    put:
      tags:
        - follow_up
      summary: Send follow up request to myhome admin.
      security:
      - Bearer: []
      parameters:
        - name: "jobId"
          in: "path"
          description: "ID of job follow up needed"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: follow up object
          schema:
            $ref: '#/definitions/FollowUpRequest'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/FollowUp'

definitions:
  WorkingHours:
    type: object
    properties:
      from:
        type: string
      till:
        type: string
      is_now_available:
        type: boolean

  RejectTime:
    type: object
    properties:
      reject_time:
        type: integer
        format: int64
        required: true

  TechnicianAvailableTime:
    type: object
    properties:
      before_time:
        type: integer
        format: int64
        required: true
        description: seconds
      after_time:
        type: integer
        format: int64
        description: seconds

  WorkingHoursUpdate:
    type: object
    properties:
      from:
        type: string
      till:
        type: string

  Token:
    type: object
    required:
      - token
    properties:
      token:
        type: string
        description: "JWT token, with expriration date, user id and user's role."
      refresh_token:
        type: string

  CompanyCommand:
    type: object
    required:
      - "name"
      - "registration_number"
      - "contact_person"
    properties:
      id:
        type: integer
        format: int64
      name:
        type: "string"
      registration_number:
        type: "string"
      contact_person:
        type: object
        required:
          - "name"
          - "phone_number"
          - "email"
        properties:
          name:
            type: "string"
          phone_number:
            type: "string"
          email:
            type: "string"
      address:
        $ref: '#/definitions/Address'
      services_id:
        type: array
        items:
          type: integer
          format: int64

  Company:
    type: object
    required:
      - "name"
      - "registration_number"
      - "contact_person"
    properties:
      id:
        type: integer
        format: int64
      name:
        type: "string"
      registration_number:
        type: "string"
      contact_person:
        type: object
        required:
          - "name"
          - "phone_number"
          - "email"
        properties:
          name:
            type: "string"
          phone_number:
            type: "string"
          email:
            type: "string"
      address:
        $ref: '#/definitions/Address'
      services:
        $ref: '#/definitions/Service'
      rating:
        type: integer
        format: int64

  UserForAdmin:
    type: "object"
    properties:
      phone_number:
        type: "string"
      password:
        type: "string"
      full_name:
        type: "string"
      delete_avatar:
        type: boolean
      default: false

  User:
    type: "object"
    required:
    - "email"
    - "full_name"
    - "phone_number"
    - "avatar_url"
    properties:
      id:
        type: "integer"
        format: "int64"
      created_at:
        description: User created date
        type: string
      full_name:
        type: "string"
      email:
        type: "string"
      phone_number:
        type: "string"
      avatar_url:
        $ref: '#/definitions/ImageWithThumbnail'
      rating:
        type: number
      type_mask:
        type: integer
        format: int8
        description: 'Bit flags: 0x1 = client; 0x2 = technical; 0x4 = admin; 0x8 = slave technician, 0x16 = company admin'
      flags_mask:
        type: integer
        format: int64
        description: |
          ```
          enum UserFlags {
            // Flag will be enabled if user was verified (activation by sms code).
            Active = 1 << 0
            // Flag will be enabled if user was locked (set by admin).
            // By default all technicians will be marked as locked after sign up.
            Locked = 1 << 1
            // Used by technician.
            // If enabled then user will recieve notifications about new jobs in his service type.
            SubscribedToNewJobs = 1 << 2
          }
          ```
      requests:
        $ref: '#/definitions/RequestCollection'
        description: "Returned only of with_requests=1 param given"

  PrivateUser:
    type: "object"
    allOf:
      - $ref: '#/definitions/User'
      - properties:
          password:
            type: "string"
          device_type:
            type: "integer"
            format: "int8"
            enum:
            - 2 # android
            - 1 # ios
            default: 1 # =)
            description: 1 - ios, 2 - android
          firebase_token:
            type: string
          ios_apns_token:
            type: string
          locale:
            type: string
          address:
            $ref: '#/definitions/Address'
    required:
      - password
      - address

  ClientUser:
    type: "object"
    allOf:
      - $ref: '#/definitions/User'

  TechnicianUser:
    type: "object"
    allOf:
      - $ref: '#/definitions/User'
      - properties:
          services_id:
            type: array
            items:
              type: integer
              format: int64
          company:
            $ref: '#/definitions/CompanyUnit'

  TechnicianUserByAdmin:
    type: "object"
    allOf:
      - $ref: '#/definitions/User'
      - properties:
          services:
            type: array
            items:
              type: object
              allOf:
                - $ref: '#/definitions/Service'
                - $ref: '#/definitions/TechnicianUnitsSpeciality'
          company:
            $ref: '#/definitions/CompanyUnit'

  TechnicianServicesSpeciality:
    type: object
    properties:
      services:
        type: array
        items:
          type: object
          properties:
            service_id:
              type: integer
              format: int64
          allOf:
            - $ref: '#/definitions/TechnicianUnitsSpeciality'

  TechnicianUnitsSpeciality:
    type: object
    properties:
      units:
        type: array
        items:
          type: object
          properties:
            unit_id:
              type: integer
              format: int64
            issues:
              type: array
              items:
                type: integer
                format: int64

  UserForAdminResponse:
    type: "object"
    allOf:
      - $ref: '#/definitions/User'
      - properties:
          services_id:
            type: array
            items:
              type: integer
              format: int64
          company:
            $ref: '#/definitions/CompanyUnit'
          required: false
          description: 'Returns only for technician'

  FavoriteTechnician:
    type: object
    properties:
      id:
        type: integer
        format: int64
      full_name:
        type: string
      phone_number:
        type: string
      avatar_url:
        $ref: '#/definitions/ImageWithThumbnail'
      services:
        type: array
        items:
          type: string

  ClientSignUpParams:
    type: object
    required:
      - full_name
      - email
      - phone_number
      - password
      - address
      - firebase_token
      - locale
      - device_type
    properties:
      full_name:
        type: "string"
      email:
        type: "string"
      phone_number:
        type: "string"
      avatar_url:
        type: "string"
      password:
        type: string
      address:
        $ref: '#/definitions/Address'
      apns_token:
        type: string
      firebase_token:
        type: string
      locale:
        type: string
      device_type:
        type: "integer"
        format: "int8"
        enum:
        - 2 # android
        - 1 # ios
        default: 1 # =)
        description: 1 - ios, 2 - android
      timezone:
        type: "string"
        description: timezone
      commercial_subscribe:
        type: integer
        default: 0
        description: 1 - subscribe, 0 - unsubscribe

  CompanyUserCreateParams:
    type: object
    required:
      - full_name
      - email
      - phone_number
    properties:
      full_name:
        type: "string"
      email:
        type: "string"
      phone_number:
        type: "string"


  CompanyTechnicianConfirmParams:
    type: object
    required:
      - full_name
      - email
      - phone_number
      - password
      - address
      - locale
      - services_id
    properties:
      full_name:
        type: "string"
      email:
        type: "string"
      phone_number:
        type: "string"
      avatar_url:
        type: "string"
      password:
        type: string
      address:
        $ref: '#/definitions/Address'
      locale:
        type: string
      services_id:
        type: array
        items:
          type: integer
          format: int64

  CompanyAdminConfirmParams:
    type: object
    required:
      - password
    properties:
      password:
        type: "string"

  TechnicianSignUpParams:
    type: object
    required:
      - full_name
      - email
      - phone_number
      - password
      - address
      - locale
      - services_id
      - company
    properties:
      full_name:
        type: "string"
      email:
        type: "string"
      phone_number:
        type: "string"
      avatar_url:
        type: "string"
      password:
        type: string
      address:
        $ref: '#/definitions/Address'
      apns_token:
        type: string
      firebase_token:
        type: string
      locale:
        type: string
      device_type:
        type: "integer"
        format: "int8"
        enum:
        - 2 # android
        - 1 # ios
        default: 1 # =)
        description: 1 - ios, 2 - android
      services_id:
        type: array
        items:
          type: integer
          format: int64
      commercial_subscribe:
        type: integer
        default: 0
        description: 1 - subscribe, 0 - unsubscribe

#      company:
#        type: object
#        properties:
#          name:
#            type: string
#          registration_number:
#            type: string

  Address:
    type: "object"
    required:
      - area
      - misc
      - street
      - house
    properties:
      area:
        $ref: '#/definitions/Area'
      misc:
        type: "string"
      street:
        type: "string"
      avenue:
        type: "string"
      house:
        type: "string"
      floor:
        type: "string"
      apartment:
        type: "string"
      extra_directions:
        type: "string"

  AddressCollection:
    type: "object"
    allOf:
    - $ref: '#/definitions/Collection'
    - required:
      - results
    - properties:
       results:
          type: "array"
          items:
            $ref: "#/definitions/Address"

  Area:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      zone_id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      parent:
        type: "string"

  TechnicianPrivateUser:
    type: "object"
    allOf:
      - $ref: '#/definitions/PrivateUser'
      - properties:
          services_id:
            type: array
            items:
              type: integer
              format: int64
          company:
            $ref: '#/definitions/CompanyUnit'

  ImageWithThumbnail:
    type: object
    properties:
      url:
        type: string
      thumbnail_url:
        type: string

  CompanyUnit:
    type: object
    properties:
      name:
        type: string
      registration_number:
        type: string

  Collection:
    type: "object"
    required:
     - items_per_page
    properties:
      _links:
        type: object
        properties:
          next:
            type: string
          self:
            type: string
      items_per_page:
        type: "integer"
        format: "int32"

  Service:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        $ref: '#/definitions/Locale'
      worker_name:
        $ref: '#/definitions/Locale'
      price_note:
        $ref: '#/definitions/Locale'
      price_note_hidden:
        type: boolean
        default: false
      icon:
        $ref: '#/definitions/Icon'
      disable:
        type: "boolean"
      unique_issue:
        type: "object"
        properties:
          name:
            $ref: '#/definitions/Locale'
          description:
            $ref: '#/definitions/Locale'
          price:
            $ref: '#/definitions/Price'
          disabled:
            type: "boolean"

  Locale:
    type: "object"
    properties:
      en:
        type: string
        default: "name"
      ar:
        type: string
        default: "name"
      default:
        type: string
        default: "name"


  ServiceCollection:
    type: "object"
    allOf:
    - $ref: '#/definitions/Collection'
    - required:
      - results
    - properties:
       results:
          type: "array"
          items:
            $ref: "#/definitions/Service"

  RequestCollection:
     type: "array"
     items:
       $ref: "#/definitions/Request"

  Request:
    type: "object"
    properties:
       id:
         type: "integer"
         format: "int64"
       note:
         type: "string"
       type:
          type: "integer"
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
          description: |
            1 - Full Name
            2 - Email
            3 - Avatar
            4 - Add Service
            5 - Remove Service
            6 - Gender (0 - off, 1 - on)
       payload :
         $ref: "#/definitions/Payload"

  Payload:
    type: "object"
    properties:
       service_id:
         type: "integer"
         format: "int64"
       value:
          type: "string"

  RequestAdminCollection:
    type: "object"
    allOf:
    - $ref: '#/definitions/Collection'
    - required:
      - results
    - properties:
       results:
          type: "array"
          items:
            $ref: "#/definitions/RequestAdmin"

  RequestAdmin:
    type: "object"
    properties:
       id:
         type: "integer"
         format: "int64"
       user_id:
         type: "integer"
         format: "int64"
       note:
         type: "string"
       avatar:
         type: "string"
       full_name:
         type: "string"
       type:
          type: "string"
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
          description: |
            1 - Full Name
            2 - Email
            3 - Avatar
            4 - Add Service
            5 - Remove Service
       payload :
         $ref: "#/definitions/PayloadAdmin"

  PayloadAdmin:
    type: "object"
    properties:
       service_id:
         type: "integer"
         format: "int64"
       value:
          type: "string"
       service_name:
          type: "string"

  Unit:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      service_id:
        type: "integer"
        format: "int64"
      name:
        $ref: '#/definitions/Locale'

  UnitsCollection:
    type: "object"
    allOf:
    - $ref: '#/definitions/Collection'
    - required:
      - results
    - properties:
        results:
          type: "array"
          items:
            $ref: "#/definitions/Unit"

  Issue:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      unit_id:
        type: "integer"
        format: "int64"
      min_count:
        type: "integer"
        format: "int8"
      max_count:
        type: "integer"
        format: "int8"
      unique:
        type: boolean
      name:
        $ref: '#/definitions/Locale'
      description:
        $ref: '#/definitions/Locale'
      worker_name:
        required: false
        $ref: '#/definitions/Locale'
      price:
        $ref: '#/definitions/Price'
      features:
        type: array
        items:
          $ref: '#/definitions/Feature'

  Price:
    type: object
    properties:
      value:
        type: string
      currency:
        type: string
        enum:
          - "KWD"
          - "USD"

  Icon:
    type: object
    properties:
      url:
        type: string
      name:
        type: string

  IssuesCollection:
    type: "object"
    allOf:
    - $ref: '#/definitions/Collection'
    - required:
      - results
    - properties:
        results:
          type: "array"
          items:
            $ref: "#/definitions/Issue"

  ZoneCollection:
    type: "object"
    allOf:
    - $ref: '#/definitions/Collection'
    - required:
      - results
    - properties:
        results:
          type: "array"
          items:
            $ref: "#/definitions/Zone"

  Zone:
    type: object
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: string
      fee:
        type: number
        format: float
      status:
        type: "integer"
        format: "int8"
        description: 0 - disable, 1 - enable
      areas:
        type: "array"
        items:
          $ref: '#/definitions/AreaAndGovernate'
  Job:
    type: object
    properties:
      id:
        type: "integer"
        format: "int64"
      owner_id:
        type: "integer"
        format: "int64"
      assigned_technician:
        $ref: '#/definitions/TechnicianPrivateUser'
      scheduled_date:
        type: "integer"
        format: "int64"
      asap:
        type: boolean
      invoices:
        type: "array"
        items:
          $ref: '#/definitions/Invoice'
      service:
        $ref: '#/definitions/Service'
      units:
        type: array
        items:
          $ref: '#/definitions/UnitWithConfiguredIssues'
      price:
        $ref: '#/definitions/Price'
      note:
        type: string
      image_urls:
        type: array
        items:
          $ref: '#/definitions/ImageWithThumbnail'
      address:
        $ref: '#/definitions/Address'
      stars_for_technician:
        type: "integer"
        format: "int8"
      technician_note:
        type: "string"
      stars_for_client:
        type: "integer"
        format: "int8"
      client_note:
        type: "string"
      follow_up_allowed:
        type: "boolean"
      follow_up:
        $ref: '#/definitions/FollowUp'
      status:
        type: "integer"
        format: "int8"
        enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
        description: |
          0 - canceled
          1 - expired
          2 - new
          3 - available
          4 - assigned
          5 - technician_on_route
          6 - technician_on_site
          7 - in_progress
          8 - technician_done
          9 - done

        default: 1

  JobExport:
    type: object
    properties:
      id:
        type: "integer"
        format: "int64"
      create_at:
        type: "string"
      client:
        type: "string"
      technician_id:
        type: integer
        format: int64
      technician:
        type: "string"
      company_id:
        type: integer
        format: int64
      company:
        type: "string"
      service:
        type: "string"
      note:
        type: "string"
      scheduled_date:
        type: "integer"
        format: "int64"
      invoices:
        type: "string"
      area:
        type: "string"
      block:
        type: "string"
      street:
        type: "string"
      house:
        type: "string"
      avenue:
        type: "string"
      apartment:
        type: "string"
      floor:
        type: "string"
      extra_directions:
        type: "string"
      price:
        type: "string"
      status:
        type: "integer"
        format: "int8"
        enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
        description: |
          0 - canceled
          1 - expired
          2 - new
          3 - available
          4 - assigned
          5 - technician_on_route
          6 - technician_on_site
          7 - in_progress
          8 - technician_done
          9 - done

        default: 1

  IssuesWithCount:
    type: object
    allOf:
    - $ref: '#/definitions/Issue'
    - properties:
        count:
          type: integer
          format: int16

  UnitWithIssuesAndCount:
    type: object
    allOf:
    - $ref: '#/definitions/Unit'
    - properties:
        issues:
          type: array
          items:
            $ref: '#/definitions/IssuesWithCount'

  UnitWithConfiguredIssues:
    type: object
    required:
      - unit
      - issues
    properties:
      unit:
        $ref: '#/definitions/Unit'
      issues:
        type: array
        items:
          $ref: '#/definitions/ConfiguredIssue'

  ConfiguredIssue:
    type: object
    required:
      - issue
    properties:
      issue:
        $ref: '#/definitions/Issue'
      count:
        type: integer
        format: int16
      feature_configs:
        type: array
        items:
          $ref: '#/definitions/FeatureConfig'

  Feature:
    type: object
    properties:
      type:
        type: integer
        format: int32
        required: true
        description: 1 - labors, 2 - hours, 3 - gender
      min:
        type: integer
        format: int32
        required: false
      max:
        type: integer
        format: int32
        required: false

  FeatureConfig:
    type: object
    required:
      - type
      - value
    properties:
      type:
        type: integer
        format: int16
      value:
        type: integer
        format: int16
        description: set "value" on 32 if choose "Female Only"  else - 0

  JobsFee:
    type: object
    properties:
      id:
        type: "integer"
        format: "int64"
      job_id:
        type: "integer"
        format: "int64"
      price:
        $ref: '#/definitions/Price'
      note:
        type: string
      image_urls:
        type: array
        items:
          $ref: '#/definitions/ImageWithThumbnail'

  JobFeesCollection:
    type: "object"
    allOf:
    - $ref: '#/definitions/Collection'
    - required:
      - results
    - properties:
        results:
          type: "array"
          items:
            $ref: "#/definitions/JobsFee"

  InvoicesCollection:
    type: "object"
    allOf:
    - $ref: '#/definitions/Collection'
    - properties:
        results:
          type: "array"
          items:
            $ref: "#/definitions/Invoice"

  JobsCollection:
    type: "object"
    allOf:
    - $ref: '#/definitions/Collection'
    - properties:
        results:
          type: "array"
          items:
            allOf:
              - $ref: "#/definitions/Job"
              - properties:
                  total_amount:
                    type: string

  JobsExportCollection:
    type: "array"
    items:
      allOf:
        - $ref: "#/definitions/JobExport"

  ClientsExportCollection:
    type: "array"
    items:
      allOf:
        - $ref: "#/definitions/ClientsExport"

  InvoicesExportCollection:
    type: "array"
    items:
      allOf:
        - $ref: "#/definitions/InvoiceExport"

  DiscountsExportCollection:
    type: "array"
    items:
      allOf:
        - $ref: "#/definitions/DiscountsExport"

  CompanyCollection:
    type: object
    allOf:
    - $ref: '#/definitions/Collection'
    - required:
      - results
    - properties:
        results:
          type: "array"
          items:
            $ref: '#/definitions/Company'


  UsersCollection:
    type: object
    allOf:
    - $ref: '#/definitions/Collection'
    - required:
      - results
    - properties:
        results:
          type: "array"
          items:
            $ref: '#/definitions/User'

  AreaAndGovernate:
    type: object
    properties:
      name:
        type: string
      parent:
        type: string
      zone:
        type: object
        properties:
          - $ref: '#/definitions/Zone'

  AreaAndGovernateCollection:
    type: object
    allOf:
    - $ref: '#/definitions/Collection'
    - required:
      - results
    - properties:
        results:
          type: "array"
          items:
            $ref: '#/definitions/AreaAndGovernate'

  Invoice:
    type: object
    properties:
      id:
        type: integer
        format: int64
      job_id:
        type: integer
        format: int64
      fee_id:
        type: integer
        format: int64
      status:
        type: "integer"
        format: "int8"
        enum:
          - 0
          - 1
          - 2
        description: |
          0 - hidden
          1 - payment required
          2 - paid
          3 - on refund
          4 - refunded
      job_status:
        type: "integer"
        format: "int8"
      payment_type:
        type: "integer"
        format: "int8"
        enum:
          - 0
          - 1
          - 2
        description: |
          0 - not selected (don't use)
          1 - cash
          2 - knet
          3 - tap
      price:
        $ref: '#/definitions/Price'
      extra_fee:
        type: number
        format: float

  JobsIDsByDate:
    type: array
    items:
      type: object
      properties:
        date:
          type: integer
          format: int64
        jobs_id:
          type: array
          items:
            type: integer
            format: uint64

  ShortStats:
    type: object
    properties:
      services_count:
        type: integer
        format: int64
      jobs_count:
        type: integer
        format: int64

  JobsStats:
    type: object
    properties:
      stat_date:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/StatsObject'
      total_jobs:
        type: integer
        format: int32
      total_price:
        type: integer
        format: int32

  InvoiceStats:
    type: object
    properties:
      stat_date:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/StatsObject'
      total_invoices:
        type: integer
        format: int32
      total_price:
        type: integer
        format: int32

  DiscountStats:
    type: object
    properties:
      stat_date:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/StatsObject'
      total_discounts:
        type: integer
        format: int32
      total_price:
        type: integer
        format: int32

  StatsObject:
    type: object
    properties:
      date:
        type: "integer"
        format: int64
      count:
        type: "integer"
        format: int64

  ClientsExport:
    type: object
    properties:
      id:
        type: integer
        format: int64
      created_at:
        type: string
      full_name:
        type: string
      phone_number:
        type: string
      email:
        type: string
      rating:
        type: number
      area:
        type: string
      block:
        type: string
      street:
        type: string
      house:
        type: string
      apartment:
        type: string
      floor:
        type: string
      extra_direction:
        type: string

  InvoiceExport:
    type: object
    properties:
      invoice_id:
        type: "integer"
        format: int64
      job_id:
        type: "integer"
        format: int64
      service:
        type: "string"
      created_date:
        type: "integer"
        format: int64
      client:
        type: "string"
      technician:
        type: "string"
      technician_id:
        type: "integer"
        format: int64
      company:
        type: "string"
      company_id:
        type: "integer"
        format: int64
      price:
        type: "string"
      transaction_id:
        type: "string"
      payment_status:
        type: "string"
      comissions:
        type: "string"
      cash:
        type: "string"
      notes:
        type: "string"
      issues:
        type: "string"

  DiscountsExport:
    type: object
    properties:
      discount_id:
        type: "integer"
        format: int64
      job_id:
        type: "integer"
        format: int64
      service:
        type: "string"
      date_applied:
        type: "string"
      client:
        type: "string"
      technician:
        type: "string"
      technician_id:
        type: "integer"
        format: int64
      company:
        type: "string"
      company_id:
        type: "integer"
        format: int64
      initial_invoice_id:
        type: "integer"
        format: int64
      initial_invoice_amount:
        type: "string"
      discount_amount:
        type: "string"
      initial_discount_amount:
        type: "string"

  JobsFinalInvoice:
    type: object
    properties:
      job_id:
        type: integer
        format: int64
      scheduled_date:
        type: "integer"
        format: "int64"
      asap:
        type: boolean
      total_price:
        $ref: '#/definitions/Price'
      owner:
        $ref: '#/definitions/User'
      assigned_technician:
        $ref: '#/definitions/TechnicianUser'
      service:
        $ref: '#/definitions/Service'
      units:
        $ref: '#/definitions/UnitWithConfiguredIssues'
      first_invoice:
        $ref: '#/definitions/Invoice'
      fees:
        $ref: '#/definitions/JobFeesCollection'
      stars_for_technician:
        type: "integer"
        format: "int8"
      technician_note:
        type: "string"
      stars_for_client:
        type: "integer"
        format: "int8"
      client_note:
        type: "string"
      rating_note:
        type: "string"

  Commission:
    type: object
    properties:
      init_commission_pct:
        type: number
        format: float
      secondary_commission_pct:
        type: number
        format: float

  DiscountApiResponse:
    type: object
    properties:
      discounts:
        type: "array"
        items:
          $ref: '#/definitions/AppliedDiscount'
      total:
        $ref: '#/definitions/Price'

  AppliedDiscount:
     type: object
     properties:
       discounts:
         type: "array"
         items:
           $ref: '#/definitions/Discount'
       amount:
         $ref: '#/definitions/Price'

  Discount:
    type: object
    properties:
      code:
        type: "string"
      type:
        type: "integer"
        format: "int8"
        enum:
          - 1
          - 2
        description: |
          1 - fixed
          2 - percent
      value_percent:
        type: number
        format: float
      value_fixed:
        $ref: '#/definitions/Price'
      aplied_to:
        $ref: '#/definitions/ApliedTo'

  ApliedTo:
    type: object
    properties:
      type:
        type: "integer"
        format: "int8"
        enum:
          - 1
          - 2
          - 3
          - 4
        description: |
          1 - global
          2 - service
          3 - unit
          4 - issue
      id:
        type: "array"
        items:
          type: integer
          format: int64

  FollowUp:
    type: object
    properties:
      note:
        type: string
      image_urls:
        type: array
        items:
          $ref: '#/definitions/ImageWithThumbnail'
      statuses:
        type: array
        items:
          $ref: '#/definitions/FollowUpStatus'

  FollowUpRequest:
    type: object
    properties:
      note:
        type: string
      image_urls:
        type: array
        items:
          type: string

  FollowUpStatus:
    type: object
    properties:
      change_date:
        type: integer
        format: uint64
        description: Unix timestamp
      status:
        type: "integer"
        format: "int8"
        enum:
          - 1
          - 2
          - 3
        description: |
          1 - new
          2 - assigned
          3 - completed

  FollowUpAdminCollection:
    type: object
    allOf:
    - $ref: '#/definitions/Collection'
    - required:
      - results
    - properties:
        results:
          type: "array"
          items:
            $ref: '#/definitions/FollowUpAdmin'

  FollowUpUser:
     type: object
     properties:
      id:
        type: integer
        format: int64
      full_name:
        type: string
      phone_number:
        type: string

  FollowUpAdmin:
     type: object
     properties:
      id:
        type: integer
        format: int64
      job_id:
        type: integer
        format: int64
      status:
        type: "integer"
        format: "int8"
        enum:
          - 1
          - 2
          - 3
        description: |
          1 - new
          2 - assigned
          3 - completed
      service:
        type: "array"
        items:
          $ref: "#/definitions/Locale"
      scheduled_date:
        type: integer
        format: uint64
        description: Unix timestamp
      total_price:
        $ref: '#/definitions/Price'
      follow_up_times:
        type: integer
      guaranteed_days:
        type: integer
      notes:
        type: string
      assigned_technician:
        $ref: '#/definitions/FollowUpUser'
      owner:
        $ref: '#/definitions/FollowUpUser'
      image_urls:
        type: array
        items:
          $ref: '#/definitions/ImageWithThumbnail'

  GlobalNotificationParams:
    type: object
    required:
      - user_type
      - message
    properties:
      user_type:
        type: integer
        format: int8
        description: |
          1 - client
          2 - technician
          3 - all users
          4 - all clients
          5 - all technicians
      users_id:
        type: array
        items:
          type: integer
          format: int32
      message:
        type: string


